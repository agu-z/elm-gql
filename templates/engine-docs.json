[{"name":"GraphQL.Engine","comment":"\n\n@docs batch\n\n@docs nullable, list, field, fieldWith, object, objectWith, decode\n\n@docs enum, maybeEnum\n\n@docs union\n\n@docs Selection, select, with, map, map2, recover\n\n@docs arg, argList, Optional, optional\n\n@docs Query, query, Mutation, mutation, Error\n\n@docs prebakedQuery, Premade, premadeOperation\n\n@docs queryString\n\n@docs Argument, maybeScalarEncode\n\n@docs encodeOptionals, encodeInputObject, encodeArgument\n\n@docs decodeNullable, getGql, mapPremade\n\n@docs unsafe, selectTypeNameButSkip\n\n@docs toRequest, send, simulate\n\n","unions":[{"name":"Argument","comment":" We can also accept:\n\n  - Enum values (unquoted)\n  - custom scalars\n\nBut we can define anything else in terms of these:\n\n","args":["obj"],"cases":[["ArgValue",["Json.Encode.Value","String.String"]],["Var",["String.String"]]]},{"name":"Error","comment":" ","args":[],"cases":[["BadUrl",["String.String"]],["Timeout",[]],["NetworkError",[]],["BadStatus",["{ status : Basics.Int, responseBody : String.String }"]],["BadBody",["{ decodingError : String.String, responseBody : String.String }"]]]},{"name":"Mutation","comment":" ","args":[],"cases":[]},{"name":"Optional","comment":" ","args":["arg"],"cases":[]},{"name":"Premade","comment":" ","args":["data"],"cases":[]},{"name":"Query","comment":" ","args":[],"cases":[]},{"name":"Selection","comment":" ","args":["source","selected"],"cases":[]}],"aliases":[],"values":[{"name":"arg","comment":" The encoded value and the name of the expected type for this argument\n","type":"Json.Encode.Value -> String.String -> GraphQL.Engine.Argument obj"},{"name":"argList","comment":" ","type":"List.List (GraphQL.Engine.Argument obj) -> String.String -> GraphQL.Engine.Argument input"},{"name":"batch","comment":" Batch a number of selection sets together!\n","type":"List.List (GraphQL.Engine.Selection source data) -> GraphQL.Engine.Selection source (List.List data)"},{"name":"decode","comment":" This adds a bare decoder for data that has already been pulled down.\n\nNote, this is rarely needed! So far, only when a query or mutation returns a scalar directly without selecting any fields.\n\n","type":"Json.Decode.Decoder data -> GraphQL.Engine.Selection source data"},{"name":"decodeNullable","comment":" ","type":"Json.Decode.Decoder data -> Json.Decode.Decoder (Maybe.Maybe data)"},{"name":"encodeArgument","comment":" ","type":"GraphQL.Engine.Argument obj -> Json.Encode.Value"},{"name":"encodeInputObject","comment":" ","type":"List.List ( String.String, GraphQL.Engine.Argument obj ) -> String.String -> GraphQL.Engine.Argument input"},{"name":"encodeOptionals","comment":" ","type":"List.List (GraphQL.Engine.Optional arg) -> List.List ( String.String, GraphQL.Engine.Argument arg )"},{"name":"enum","comment":" ","type":"List.List ( String.String, item ) -> Json.Decode.Decoder item"},{"name":"field","comment":" ","type":"String.String -> Json.Decode.Decoder data -> GraphQL.Engine.Selection source data"},{"name":"fieldWith","comment":" ","type":"List.List ( String.String, GraphQL.Engine.Argument arg ) -> String.String -> Json.Decode.Decoder data -> GraphQL.Engine.Selection source data"},{"name":"getGql","comment":" ","type":"GraphQL.Engine.Premade data -> String.String"},{"name":"list","comment":" Used in generated code to handle maybes\n","type":"GraphQL.Engine.Selection source data -> GraphQL.Engine.Selection source (List.List data)"},{"name":"map","comment":" ","type":"(a -> b) -> GraphQL.Engine.Selection source a -> GraphQL.Engine.Selection source b"},{"name":"map2","comment":" ","type":"(a -> b -> c) -> GraphQL.Engine.Selection source a -> GraphQL.Engine.Selection source b -> GraphQL.Engine.Selection source c"},{"name":"mapPremade","comment":" ","type":"(a -> b) -> GraphQL.Engine.Premade a -> GraphQL.Engine.Premade b"},{"name":"maybeEnum","comment":" ","type":"List.List ( String.String, item ) -> Json.Decode.Decoder (Maybe.Maybe item)"},{"name":"maybeScalarEncode","comment":" ","type":"(a -> Json.Encode.Value) -> Maybe.Maybe a -> Json.Encode.Value"},{"name":"mutation","comment":" ","type":"GraphQL.Engine.Selection GraphQL.Engine.Mutation msg -> { name : Maybe.Maybe String.String, headers : List.List Http.Header, url : String.String, timeout : Maybe.Maybe Basics.Float, tracker : Maybe.Maybe String.String } -> Platform.Cmd.Cmd (Result.Result GraphQL.Engine.Error msg)"},{"name":"nullable","comment":" Used in generated code to handle maybes\n","type":"GraphQL.Engine.Selection source data -> GraphQL.Engine.Selection source (Maybe.Maybe data)"},{"name":"object","comment":" ","type":"String.String -> GraphQL.Engine.Selection source data -> GraphQL.Engine.Selection otherSource data"},{"name":"objectWith","comment":" ","type":"List.List ( String.String, GraphQL.Engine.Argument arg ) -> String.String -> GraphQL.Engine.Selection source data -> GraphQL.Engine.Selection otherSource data"},{"name":"optional","comment":"\n\n    Encode the nullability in the argument itself.\n\n","type":"String.String -> GraphQL.Engine.Argument arg -> GraphQL.Engine.Optional arg"},{"name":"prebakedQuery","comment":" ","type":"String.String -> List.List ( String.String, Json.Encode.Value ) -> Json.Decode.Decoder data -> GraphQL.Engine.Premade data"},{"name":"premadeOperation","comment":" ","type":"GraphQL.Engine.Premade value -> { headers : List.List Http.Header, url : String.String, timeout : Maybe.Maybe Basics.Float, tracker : Maybe.Maybe String.String } -> Platform.Cmd.Cmd (Result.Result GraphQL.Engine.Error value)"},{"name":"query","comment":" ","type":"GraphQL.Engine.Selection GraphQL.Engine.Query value -> { name : Maybe.Maybe String.String, headers : List.List Http.Header, url : String.String, timeout : Maybe.Maybe Basics.Float, tracker : Maybe.Maybe String.String } -> Platform.Cmd.Cmd (Result.Result GraphQL.Engine.Error value)"},{"name":"queryString","comment":" ","type":"String.String -> Maybe.Maybe String.String -> GraphQL.Engine.Selection source data -> String.String"},{"name":"recover","comment":" ","type":"recovered -> (data -> recovered) -> GraphQL.Engine.Selection source data -> GraphQL.Engine.Selection source recovered"},{"name":"select","comment":" ","type":"data -> GraphQL.Engine.Selection source data"},{"name":"selectTypeNameButSkip","comment":" ","type":"GraphQL.Engine.Selection source ()"},{"name":"send","comment":"","type":"GraphQL.Engine.Request data -> Platform.Cmd.Cmd (Result.Result GraphQL.Engine.Error data)"},{"name":"simulate","comment":"","type":"{ toHeader : String.String -> String.String -> header, toExpectation : (Http.Response String.String -> Result.Result GraphQL.Engine.Error value) -> expectation, toBody : Json.Encode.Value -> body, toRequest : { method : String.String, headers : List.List header, url : String.String, body : body, expect : expectation, timeout : Maybe.Maybe Basics.Float, tracker : Maybe.Maybe String.String } -> simulated } -> GraphQL.Engine.Request value -> simulated"},{"name":"toRequest","comment":" \nReturn details that can be directly given to `Http.request`.\n\nThis is so that wiring up [Elm Program Test](https://package.elm-lang.org/packages/avh4/elm-program-test/latest/ProgramTest) is relatively easy.\n\n\n","type":"GraphQL.Engine.Premade value -> { headers : List.List ( String.String, String.String ), url : String.String, timeout : Maybe.Maybe Basics.Float, tracker : Maybe.Maybe String.String } -> GraphQL.Engine.Request value"},{"name":"union","comment":" ","type":"List.List ( String.String, GraphQL.Engine.Selection source data ) -> GraphQL.Engine.Selection source data"},{"name":"unsafe","comment":" ","type":"GraphQL.Engine.Selection source selected -> GraphQL.Engine.Selection unsafe selected"},{"name":"with","comment":" ","type":"GraphQL.Engine.Selection source a -> GraphQL.Engine.Selection source (a -> b) -> GraphQL.Engine.Selection source b"}],"binops":[]}]