# OPERATIONS

type Query {
  app(id: ID!): App
  person(id: ID!): Person
}

type Mutation {
  personCreate(input: PersonCreateInput!): PersonCreateResult!
  # personUpdate(input: PersonUpdateInput!): PersonUpdateResult!
}

# OBJECTS

type App {
  id: ID!
  slug: String!
  name: String!
}

type Person {
  id: ID!
  name: Name!
  email: String
}

type Name {
  first: String!
  middle: String
  last: String!
}

# ENUMS

enum Color {
  RED
  BLUE
  GREEN
}

# SCALARS

scalar Timestamp

# INTERFACES

interface Error {
  message: String!
}

type NameAlreadyExistsError implements Error {
  message: String!
}

type NotFoundError implements Error {
  id: ID!
  message: String!
}

# UNIONS

union PersonCreateResult = Person | NameAlreadyExistsError

union PersonUpdateResult = Person | NotFoundError

# INPUTS

input PersonCreateInput {
  name: String!
  email: String
}

input PersonUpdateInput {
  id: ID!
  name: SetRequiredString
  email: SetOptionalString
}

input SetRequiredString {
  value: String!
}

input SetOptionalString {
  value: String
}
