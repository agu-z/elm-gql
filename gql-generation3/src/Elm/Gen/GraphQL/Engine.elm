module Elm.Gen.GraphQL.Engine exposing (..)

{-|
This file was generated by elm-prefab!
-}

import Elm


{-| The encoded value and the name of the expected type for this argument


Json.Encode.Value -> String.String -> GraphQL.Engine.Argument
-}
arg : Elm.Expression
arg =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "arg"


{-|

Json.Decode.Decoder GraphQL.Engine.Id
-}
decodeId : Elm.Expression
decodeId =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "decodeId"


{-|

GraphQL.Engine.Id -> Json.Decode.Value
-}
encodeId : Elm.Expression
encodeId =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "encodeId"


{-|

List.List ( String.String, item ) -> Json.Decode.Decoder item
-}
enum : Elm.Expression
enum =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "enum"


{-|

String.String -> Json.Decode.Decoder data -> GraphQL.Engine.Selection source data
-}
field : Elm.Expression
field =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "field"


{-|

List.List ( String.String, GraphQL.Engine.Argument ) -> String.String -> Json.Decode.Decoder data -> GraphQL.Engine.Selection source data
-}
fieldWith : Elm.Expression
fieldWith =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "fieldWith"


{-|

(a -> b) -> GraphQL.Engine.Selection source a -> GraphQL.Engine.Selection source b
-}
map : Elm.Expression
map =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "map"


{-|

(a -> b -> c) -> GraphQL.Engine.Selection source a -> GraphQL.Engine.Selection source b -> GraphQL.Engine.Selection source c
-}
map2 : Elm.Expression
map2 =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "map2"


{-|

List.List ( String.String, item ) -> Json.Decode.Decoder (Maybe.Maybe item)
-}
maybeEnum : Elm.Expression
maybeEnum =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "maybeEnum"


{-|

(a -> Json.Encode.Value) -> Maybe.Maybe a -> Json.Encode.Value
-}
maybeScalarEncode : Elm.Expression
maybeScalarEncode =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "maybeScalarEncode"


{-|

GraphQL.Engine.Selection GraphQL.Engine.Mutation msg -> { headers : List.List Http.Header, url : String.String, timeout : Maybe.Maybe Basics.Float, tracker : Maybe.Maybe String.String } -> Platform.Cmd.Cmd (Result.Result Http.Error msg)
-}
mutation : Elm.Expression
mutation =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "mutation"


{-|
Used in generated code to handle maybes


GraphQL.Engine.Selection source data -> GraphQL.Engine.Selection source (Maybe.Maybe data)
-}
nullable : Elm.Expression
nullable =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "nullable"


{-|

String.String -> GraphQL.Engine.Selection source data -> GraphQL.Engine.Selection otherSource data
-}
object : Elm.Expression
object =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "object"


{-|

List.List ( String.String, GraphQL.Engine.Argument ) -> String.String -> GraphQL.Engine.Selection source data -> GraphQL.Engine.Selection otherSource data
-}
objectWith : Elm.Expression
objectWith =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "objectWith"


{-|

GraphQL.Engine.Selection GraphQL.Engine.Query value -> { headers : List.List Http.Header, url : String.String, timeout : Maybe.Maybe Basics.Float, tracker : Maybe.Maybe String.String } -> Platform.Cmd.Cmd (Result.Result Http.Error value)
-}
query : Elm.Expression
query =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "query"


{-|



GraphQL.Engine.Selection source data -> String.String
-}
queryString : Elm.Expression
queryString =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "queryString"


{-|

recovered -> (data -> recovered) -> GraphQL.Engine.Selection source data -> GraphQL.Engine.Selection source recovered
-}
recover : Elm.Expression
recover =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "recover"


{-|

data -> GraphQL.Engine.Selection source data
-}
select : Elm.Expression
select =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "select"


{-|

List.List ( String.String, GraphQL.Engine.Selection source data ) -> GraphQL.Engine.Selection source data
-}
union : Elm.Expression
union =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "union"


{-|

GraphQL.Engine.Selection source a -> GraphQL.Engine.Selection source (a -> b) -> GraphQL.Engine.Selection source b
-}
with : Elm.Expression
with =
    Elm.valueFrom (Elm.moduleName [ "GraphQL", "Engine" ]) "with"
