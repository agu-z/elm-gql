export default (): string => "module GraphQL.Operations.CanonicalAST exposing (..)\n\nimport GraphQL.Operations.AST as AST\nimport GraphQL.Schema\n\n\ntype alias Document =\n    { definitions : List Definition\n    }\n\n\ntype Definition\n    = Operation OperationDetails\n\n\ntype alias OperationDetails =\n    { operationType : OperationType\n    , name : Maybe Name\n    , variableDefinitions : List VariableDefinition\n    , directives : List Directive\n    , fields : List Selection\n    }\n\n\ntype OperationType\n    = Query\n    | Mutation\n\n\ntype alias Directive =\n    { name : Name\n    , arguments : List Argument\n    }\n\n\ntype alias Argument =\n    { name : Name\n    , value : AST.Value\n    }\n\n\ntype alias VariableDefinition =\n    { variable : Variable\n    , type_ : AST.Type\n    , defaultValue : Maybe AST.Value\n    , schemaType : GraphQL.Schema.Type\n    }\n\n\ntype alias Variable =\n    { name : Name\n    }\n\n\ntype Selection\n    = FieldObject FieldObjectDetails\n    | FieldUnion FieldUnionDetails\n    | FieldScalar FieldScalarDetails\n    | FieldEnum FieldEnumDetails\n    | UnionCase UnionCaseDetails\n\n\ntype alias FieldDetails =\n    { alias_ : Maybe Name\n    , name : Name\n    , arguments : List Argument\n    , directives : List Directive\n    , selection : List Selection\n    }\n\n\ntype alias FieldObjectDetails =\n    { alias_ : Maybe Name\n    , name : Name\n    , arguments : List Argument\n    , directives : List Directive\n    , selection : List Selection\n    , object : GraphQL.Schema.ObjectDetails\n    , wrapper : GraphQL.Schema.Wrapped\n    }\n\n\ntype alias FieldUnionDetails =\n    { alias_ : Maybe Name\n    , name : Name\n    , arguments : List Argument\n    , directives : List Directive\n    , selection : List Selection\n    , union : GraphQL.Schema.UnionDetails\n    , wrapper : GraphQL.Schema.Wrapped\n    }\n\n\ntype alias FieldScalarDetails =\n    { alias_ : Maybe Name\n    , name : Name\n    , arguments : List Argument\n    , directives : List Directive\n    , type_ : GraphQL.Schema.Type\n    }\n\n\ntype alias FieldEnumDetails =\n    { alias_ : Maybe Name\n    , name : Name\n    , arguments : List Argument\n    , directives : List Directive\n    , enumName : String\n    , values : List { name : String, description : Maybe String }\n    , wrapper : GraphQL.Schema.Wrapped\n    }\n\n\ntype alias UnionCaseDetails =\n    { tag : Name\n    , directives : List Directive\n    , selection : List Selection\n    }\n\n\ntype Name\n    = Name String\n\n\ngetAliasedName : Selection -> String\ngetAliasedName sel =\n    case sel of\n        FieldObject details ->\n            nameToString (Maybe.withDefault details.name details.alias_)\n\n        FieldUnion details ->\n            nameToString (Maybe.withDefault details.name details.alias_)\n\n        FieldScalar details ->\n            nameToString (Maybe.withDefault details.name details.alias_)\n\n        FieldEnum details ->\n            nameToString (Maybe.withDefault details.name details.alias_)\n\n        UnionCase details ->\n            nameToString details.tag\n\n\nnameToString : Name -> String\nnameToString (Name str) =\n    str\n"